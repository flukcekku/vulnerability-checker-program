const { ipcRenderer } = require("electron");
const ipc = ipcRenderer;

// const { ipcRenderer } = require('electron');

ipc.on('python-result', (event, data) => {
  const pythonResultElement = document.getElementById('pythonResult');
  pythonResultElement.innerText = data;
});

btn.addEventListener("click", () => {
    console.log("click open input url page");
    ipc.send("clickcheckBTNfromMain");
});

// function cleanURL() {
//     let check = document.getElementById("linkToScan").value;
//     // let showResult = document.getElementById("cerResults");

//     // let sslChecker = require("ssl-checker")
//     // let daysRemaining = "Time remaining "+result['daysRemaining']+ " day"
//     // let validate = "Validate = "+result['valid']
//     // let validFrom = "Start valid from "+result['validFrom']
//     // let validTo = "Expire valid to "+result['validTo']

//     console.log('clean URL')
//     let url = ''
//     if (check.includes("://")) {
//         url = new URL(check).hostname
//     } else {
//         url = check
//     }
//     return url
// }

// function certificateChecker() {
//     return new Promise(function (resolve, reject) {
//         setTimeout(function () {

//             // code

//             let check = document.getElementById("linkToScan").value;
//             // let showResult = document.getElementById("cerResults");

//             let sslChecker = require("ssl-checker")

//             // let daysRemaining = "Time remaining "+result['daysRemaining']+ " day"
//             // let validate = "Validate = "+result['valid']
//             // let validFrom = "Start valid from "+result['validFrom']
//             // let validTo = "Expire valid to "+result['validTo']

//             console.log(check)
//             console.log('clean URL')
//             let url = ''
//             if (check.includes("://")){
//                 url = new URL(check).hostname
//             } else {
//                 url = check
//             }

//             // let url = new URL(check).hostname
//             // console.log(url)
//             console.log('yo')

//             // check certificate valid

//             console.log('check certificate valid')

//             // cleanURL().then(function (url) {
//                 console.log(url)
//                 sslChecker(url, "GET", 443).then((result) => {
//                     let res = result["daysRemaining"]
//                     let daysRemaining = "Time remaining " + result["daysRemaining"] + " day";
//                     let validate = "Validate = " + result["valid"];
//                     let validFrom = "Start valid from " + new Date(result["validFrom"]).toLocaleString();
//                     let validTo = "Expire valid to " + new Date(result["validTo"]).toLocaleString();
//                     let validFor = "Valid for " + result["validFor"];

//                     let check_day = Math.sign(result['daysRemaining'])

//                     // console.log(res)
//                     // console.log(daysRemaining)
//                     // console.log(validate)
//                     // console.log(validFrom)
//                     // console.log(validTo)
//                     // console.log(validFor)
//                     // console.log(check_day)

//                     // showResult.innerHTML = daysRemaining;
//                     // document.getElementById("daysRemaining").innerHTML = daysRemaining;
//                     // document.getElementById("validate").innerHTML = validate;
//                     // document.getElementById("validFrom").innerHTML = validFrom;
//                     // document.getElementById("validFrom").innerHTML = validFrom;
//                     // document.getElementById("validTo").innerHTML = validTo;
//                     // document.getElementById("validFor").innerHTML = validFor;

//                     console.log('Math.sign = ' + Math.sign(result['daysRemaining']));
//                     console.log(validate)

//                     if (result["valid"] == true && res == 1) {
//                         switch (Math.sign(result['daysRemaining'])) {
//                             case 1:
//                                 document.getElementById('Certificate_icon').style.color = 'green'
//                                 document.getElementById("dayremaining").innerHTML = res + ' remaining';
//                                 console.log('มันเข้า 1 ด้วย')
//                                 break
//                             case -1:
//                                 document.getElementById('Certificate_icon').style.color = 'red'
//                                 document.getElementById("dayremaining").innerHTML = daysRemaining + ' day expired';
//                                 console.log('มันเข้า -1 ด้วย')
//                                 break
//                             case 0:
//                                 document.getElementById('Certificate_icon').style.color = 'red'
//                                 document.getElementById("dayremaining").innerHTML = 'Today expired';
//                                 console.log('มันเข้า 0 ด้วย')
//                                 break
//                             case -0:
//                                 document.getElementById("dayremaining").innerHTML = '-0';
//                                 console.log('มันเข้า -0 ด้วย')
//                                 break
//                             case NaN:
//                                 document.getElementById("dayremaining").innerHTML = 'NaN';
//                                 console.log('มันเข้า NaN ด้วย')
//                                 break
//                             default:
//                                 document.getElementById("dayremaining").innerHTML = 'อยู่เหนือความคาดหมาย';
//                                 break

//                         }
//                     } else if (result["valid"] == true && check_day == -1) {
//                         document.getElementById('Certificate_icon').style.color = 'red'
//                         document.getElementById("dayremaining").innerHTML = 'not extend validate';
//                     } else if (result["valid"] == false) {
//                         document.getElementById('Certificate_icon').style.color = 'red'
//                         document.getElementById("dayremaining").innerHTML = 'Fake validate';
//                     }

//                     // test only
//                     // document.getElementById('Certificate_icon').style.color = 'green'
//                     // document.getElementById("dayremaining").innerHTML = daysRemaining+' remaining';
//                     // test only

//                 });
//             // })

//             // wrong.host.badssl.com
//             // https://badssl.com/
//             // https://expired.badssl.com/

//             // press enter for execute send input

//             // ipc.send("SuccessCheck_url");

//             //===============================================================================================

//             console.log('sslChecker Successful')
//             resolve()
//         }, 500)
//     })
// }

// function checkLocation() {
//     return new Promise(function (resolve, reject) {
//         setTimeout(function () {

//             // check Location

//             const dns = require("dns");

//             cleanURL().then(function (url) {
//                 dns.lookup(url, (err, address, family) => {

//                     if (err) {
//                         document.getElementById('Location_icon').style.color = 'green'
//                         console.error(`DNS lookup failed: ${err}`);
//                     } else {
//                         console.log(`IP address: ${address}`);
//                         console.log(`Address family: IPv${family}`);

//                         const https = require('https');

//                         https.get('https://ipinfo.io/' + address + '/json', (res) => {
//                             let data = '';

//                             res.on('data', (chunk) => {
//                                 data += chunk;
//                             });

//                             res.on('end', () => {
//                                 const location = JSON.parse(data);
//                                 console.log(`City: ${location.city}`);
//                                 console.log(`Region: ${location.region}`);
//                                 console.log(`Country: ${location.country}`);

//                                 // https://restcountries.com/#api-endpoints-v2-full-name
//                                 // https://restcountries.com/v2/name/US?fullText=true

//                                 const https = require('https');

//                                 https.get('https://restcountries.com/v2/name/' + location.country + '?fullText=true', (res) => {
//                                     // https://restcountries.com/v2/name/{name}?fullText=true
//                                     let data_country = '';

//                                     res.on('data', (chunk2) => {
//                                         data_country += chunk2;
//                                     });

//                                     res.on('end', () => {
//                                         const country = JSON.parse(data_country)[0];
//                                         console.log(`Full name: ${country.name}`);
//                                         document.getElementById('countryServer').innerHTML = country.name
//                                         document.getElementById('Location_icon').style.color = 'green'

//                                     });

//                                 }).on('error', (err) => {
//                                     document.getElementById('Location_icon').style.color = 'red'

//                                     console.error(`API request failed: ${err}`);
//                                     // document.getElementById('country_server').innerHTML = err
//                                 });

//                                 // document.getElementById('country').innerHTML = location.country

//                             });

//                         }).on('error', (err) => {
//                             document.getElementById('Location_icon').style.color = 'red'

//                             console.error(`IP geolocation failed: ${err}`);
//                         });
//                     }
//                 });
//             })
//             console.log('check Location')

//             console.log('Check Location Successful')
//             resolve()
//         }, 500)
//     })
// }

// function checkWebServerEngineHTTP() {
//     return new Promise(function (resolve, reject) {
//         setTimeout(function () {
//             cleanURL().then(function (url) {
//                 // check Engine HTTP

//                 const https = require("https");

//                 console.log("check Engine HTTP");
//                 // `https://${check.startsWith("www.") ? check : "www." + check}`;
//                 https.get(
//                     `https://${url.startsWith("www.") ? url : "www." + url}`,
//                     (res) => {
//                         let header = res.headers["server"];
//                         console.log(`The HTTP server engine is: ${header}`);

//                         if (header == undefined) {
//                             document.getElementById("Engine_HTTP_icon").style.color =
//                                 "#969d52";
//                             document.getElementById("serverHTTP").innerHTML = header;
//                         } else {
//                             document.getElementById("Engine_HTTP_icon").style.color = "green";
//                             document.getElementById("serverHTTP").innerHTML = header;
//                         }
//                     }
//                 );
//             });

//             console.log("Check Engine HTTP Successful");
//             resolve();
//         }, 500);
//     });
// }

// async function scanSite() {
//     await certificateChecker();
//     await checkLocation();
//     await checkWebServerEngineHTTP();
//     console.log("Scan Site Successful");
// }

// const sslChecker = require("ssl-checker");

scan.addEventListener("click", () => {
    //setDefalut
    document.getElementById("Certificate_icon").style.color = "#797979";
    document.getElementById("dayremaining").innerHTML = "";

    document.getElementById("Location_icon").style.color = "#797979";
    document.getElementById("countryServer").innerHTML = "";

    document.getElementById("Engine_HTTP_icon").style.color = "#797979";
    document.getElementById("serverHTTP").innerHTML = "";

    document.getElementById("Web_Vulnerability_icon").style.color = "#797979";
    document.getElementById("Web_Vulnerability_boxtext").innerHTML = "";


    // scanSite()

    let check = document.getElementById("linkToScan").value;
    // let showResult = document.getElementById("cerResults");

    let sslChecker = require("ssl-checker");

    // let daysRemaining = "Time remaining "+result['daysRemaining']+ " day"
    // let validate = "Validate = "+result['valid']
    // let validFrom = "Start valid from "+result['validFrom']
    // let validTo = "Expire valid to "+result['validTo']

    console.log(check);
    console.log("clean URL");
    let url = "";
    if (check.includes("://")) {
        url = new URL(check).hostname;
    } else {
        url = check;
    }

    // let url = new URL(check).hostname
    // console.log(url)
    console.log("yo");

    // check certificate valid

    console.log("check certificate valid");

    console.log(url);
    sslChecker(url, "GET", 443).then((result) => {
        let res = result["daysRemaining"];
        let daysRemaining = "Time remaining " + result["daysRemaining"] + " day";
        let validate = "Validate = " + result["valid"];
        let validFrom =
            "Start valid from " + new Date(result["validFrom"]).toLocaleString();
        let validTo =
            "Expire valid to " + new Date(result["validTo"]).toLocaleString();
        let validFor = "Valid for " + result["validFor"];

        let check_day = Math.sign(result["daysRemaining"]);

        // console.log(res)
        // console.log(daysRemaining)
        // console.log(validate)
        // console.log(validFrom)
        // console.log(validTo)
        // console.log(validFor)
        // console.log(check_day)

        // showResult.innerHTML = daysRemaining;
        // document.getElementById("daysRemaining").innerHTML = daysRemaining;
        // document.getElementById("validate").innerHTML = validate;
        // document.getElementById("validFrom").innerHTML = validFrom;
        // document.getElementById("validFrom").innerHTML = validFrom;
        // document.getElementById("validTo").innerHTML = validTo;
        // document.getElementById("validFor").innerHTML = validFor;

        console.log("Math.sign = " + Math.sign(result["daysRemaining"]));
        console.log(validate);

        if (result["valid"] == true && check_day == 1) {
            switch (Math.sign(result["daysRemaining"])) {
                case 1:
                    document.getElementById("Certificate_icon").style.color = "green";
                    document.getElementById("dayremaining").innerHTML =
                        res + " remaining";
                    console.log("มันเข้า 1 ด้วย");
                    break;
                case -1:
                    document.getElementById("Certificate_icon").style.color = "red";
                    document.getElementById("dayremaining").innerHTML =
                        daysRemaining + " day expired";
                    console.log("มันเข้า -1 ด้วย");
                    break;
                case 0:
                    document.getElementById("Certificate_icon").style.color = "red";
                    document.getElementById("dayremaining").innerHTML = "Today expired";
                    console.log("มันเข้า 0 ด้วย");
                    break;
                case -0:
                    document.getElementById("dayremaining").innerHTML = "-0";
                    console.log("มันเข้า -0 ด้วย");
                    break;
                case NaN:
                    document.getElementById("dayremaining").innerHTML = "NaN";
                    console.log("มันเข้า NaN ด้วย");
                    break;
                default:
                    document.getElementById("dayremaining").innerHTML =
                        "อยู่เหนือความคาดหมาย";
                    break;
            }
        } else if (result["valid"] == true && check_day == -1) {
            document.getElementById("Certificate_icon").style.color = "red";
            document.getElementById("dayremaining").innerHTML = "not extend validate";
        } else if (result["valid"] == false) {
            document.getElementById("Certificate_icon").style.color = "red";
            document.getElementById("dayremaining").innerHTML = "Fake validate";
        }

        // test only
        // document.getElementById('Certificate_icon').style.color = 'green'
        // document.getElementById("dayremaining").innerHTML = daysRemaining+' remaining';
        // test only
    }).catch((error) => {
        document.getElementById("Certificate_icon").style.color = "red";
        document.getElementById("dayremaining").innerHTML = "Failed to find certificate"

        console.error(`Certificate failed: ${error}`);
    });

    // wrong.host.badssl.com
    // https://badssl.com/
    // https://expired.badssl.com/

    // press enter for execute send input

    // ipc.send("SuccessCheck_url");

    //===============================================================================================




    const axios = require('axios');

    async function getCountryName(abbreviation) {
    try {
        const response = await axios.get(`http://api.geonames.org/countryInfoJSON?username=location_f&country=${abbreviation}`);
        const data = response.data.geonames[0];
        return data.countryName;
    } catch (error) {
        console.error(error);
        throw new Error(`Failed to get full name for ${abbreviation}`);
    }
    }



    //===============================================================================================

    const dns = require("dns");

    dns.lookup(url, (err, address, family) => {
        if (err) {
            document.getElementById("Location_icon").style.color = "green";
            console.error(`DNS lookup failed: ${err}`);
        } else {
            console.log(`IP address: ${address}`);
            console.log(`Address family: IPv${family}`);

            const https = require("https");

            https
                .get("https://ipinfo.io/" + address + "/json", (res) => {
                    let data = "";

                    res.on("data", (chunk) => {
                        data += chunk;
                    });

                    res.on("end", () => {
                        const location = JSON.parse(data);
                        console.log(`City: ${location.city}`);
                        console.log(`Region: ${location.region}`);
                        console.log(`Country: ${location.country}`);

                        getCountryName(location.country)
                        .then((fullName) => {
                            console.log("location = "+fullName)
                            document.getElementById("countryServer").innerHTML = fullName;
                            document.getElementById("Location_icon").style.color = "green";
                        }) // outputs "United States of America"
                        .catch((error) => {
                            console.error(error)
                            document.getElementById("countryServer").innerHTML = "API Error";
                            document.getElementById("Location_icon").style.color = "red";
                        });

                        // https://restcountries.com/#api-endpoints-v2-full-name
                        // https://restcountries.com/v2/name/US?fullText=true
                    });
                })
                .on("error", (err) => {
                    document.getElementById("Location_icon").style.color = "red";

                    console.error(`IP geolocation failed: ${err}`);
                });
        }
    });


    

    



    // check Engine HTTP

    const https = require("https");

    console.log("check Engine HTTP");
    // `https://${check.startsWith("www.") ? check : "www." + check}`;
    https.get(`https://${url.startsWith("www.") ? url : "www." + url}`, (res) => {
        let header = res.headers["server"];
        console.log(`The HTTP server engine is: ${header}`);

        if (header == undefined) {
            document.getElementById("Engine_HTTP_icon").style.color = "#969d52";
            document.getElementById("serverHTTP").innerHTML = header;
        } else {
            document.getElementById("Engine_HTTP_icon").style.color = "green";
            document.getElementById("serverHTTP").innerHTML = header;
        }
    });

    urls = document.querySelectorAll("a");
    for (url in urls) console.log(urls[url].href);

    fetch(url)
        .then((response) => {
            if (response.status === 401) {
                console.log("Access denied");
            } else if (response.status === 403) {
                console.log("Forbidden");
            } else {
                console.log("Access granted");
            }
        })
        .catch((error) => {
            console.error("Function Broken acess control Error:", error);
        });

    function checkBrokenAccessControl(url) {
        const endpoint = '/admin/addUser';
        const urlPath = new URL(url).pathname;
        if (urlPath.toLowerCase() === endpoint.toLowerCase()) {
            console.log('Broken access control detected');
        } else {
            console.log('No broken access control detected');
        }
    }

    // Make an AJAX request to retrieve data from a website
    const xhrrrr = new XMLHttpRequest();
    xhrrrr.onreadystatechange = function() {
    if (this.readyState === 4 && this.status === 200) {
        // Parse the response and extract the data you want to scrape
        const dataWeb = JSON.parse(this.responseText);
        const scrapedData = dataWeb.someProperty;
        // Store the scraped data in a data structure or write it to a file
        console.log(scrapedData);
        console.log("Store the scraped data in a data structure or write it to a file")
    }};
    xhrrrr.open("GET", url, true);
    xhrrrr.send();



    const { net } = require('electron');
    let visitedUrls = [];
    function spider(url) {
      if (visitedUrls.includes(url)) {
        return; // URL has already been visited, exit function
      }
      visitedUrls.push(url); // Add URL to visited list
    
      const win = new BrowserWindow({ show: false }); // Create new hidden BrowserWindow object
      const session = win.webContents.session;
    
      session.clearCache(() => {
        const request = net.request(url); // Create new HTTP request
        request.on('response', (response) => {
          let dataSite = '';
    
          response.on('dataSite', (chunk) => {
            dataStie += chunk; // Collect response data
          });
    
          response.on('end', () => {
            // Parse response and look for new URLs to visit
            // ...
            // Call spider() function recursively for each new URL found
            // spider(newUrl);
            win.destroy(); // Close BrowserWindow object
          });
        });
    
        request.on('error', (err) => {
          console.error(err);
        });
    
        request.end(); // Send request
      });
    }
    
    app.on('ready', () => {
      spider(url);
    });



    // module.exports = {
    //     rules: {
    //         "no-broken-access-control": {
    //             create: function (context) {
    //                 return {
    //                     // Check for expressions like req.user.id === req.params.id
    //                     BinaryExpression(node) {
    //                         if (
    //                             node.operator === "===" &&
    //                             node.left.object.name === "req" &&
    //                             node.right.object.name === "req"
    //                         ) {
    //                             context.report({
    //                                 node,
    //                                 message: "Potential broken access control vulnerability",
    //                             });
    //                         }
    //                     },
    //                 };
    //             },
    //         },
    //     },
    // };

    // ipc.send("checkIP");

    // const fetch = require('node-fetch');

    // const adminUrl = 'http://127.0.0.1/admin_welcome.php';
    // const userUrl = 'http://127.0.0.1/user_welcome.php';

    // async function checkAccessControl() {
    // const responseAdmin = await fetch(adminUrl);
    // const responseUser = await fetch(userUrl);
    // const contentAdmin = await responseAdmin.text();
    // const contentUser = await responseUser.text();

    // if (responseAdmin.ok && contentAdmin === contentUser) {
    //     console.log('Broken access control detected');
    //     document.getElementById('Web_Vulnerability_icon').style.color = 'green'
    // } else {
    //     console.log('Broken access control not detected');
    //     document.getElementById('Web_Vulnerability_icon').style.color = 'red'
    // }
    // }
    // checkAccessControl();

    // ipc.send("SuccessCheck_url");
});