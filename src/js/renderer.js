const {
    ipcRenderer
} = require('electron')
const ipc = ipcRenderer



btn.addEventListener("click", () => {
    console.log("click open input url page");
    ipc.send("clickcheckBTNfromMain");
});

// function cleanURL() {
//     let check = document.getElementById("linkToScan").value;
//     // let showResult = document.getElementById("cerResults");

//     // let sslChecker = require("ssl-checker")
//     // let daysRemaining = "Time remaining "+result['daysRemaining']+ " day"
//     // let validate = "Validate = "+result['valid']
//     // let validFrom = "Start valid from "+result['validFrom']
//     // let validTo = "Expire valid to "+result['validTo']


//     console.log('clean URL')
//     let url = ''
//     if (check.includes("://")) {
//         url = new URL(check).hostname
//     } else {
//         url = check
//     }
//     return url
// }


// function certificateChecker() {
//     return new Promise(function (resolve, reject) {
//         setTimeout(function () {

//             // code

//             let check = document.getElementById("linkToScan").value;
//             // let showResult = document.getElementById("cerResults");

//             let sslChecker = require("ssl-checker")


//             // let daysRemaining = "Time remaining "+result['daysRemaining']+ " day"
//             // let validate = "Validate = "+result['valid']
//             // let validFrom = "Start valid from "+result['validFrom']
//             // let validTo = "Expire valid to "+result['validTo']


//             console.log(check)
//             console.log('clean URL')
//             let url = ''
//             if (check.includes("://")){
//                 url = new URL(check).hostname
//             } else {
//                 url = check
//             }


//             // let url = new URL(check).hostname
//             // console.log(url)
//             console.log('yo')




//             // check certificate valid

//             console.log('check certificate valid')

//             // cleanURL().then(function (url) {
//                 console.log(url)
//                 sslChecker(url, "GET", 443).then((result) => {
//                     let res = result["daysRemaining"]
//                     let daysRemaining = "Time remaining " + result["daysRemaining"] + " day";
//                     let validate = "Validate = " + result["valid"];
//                     let validFrom = "Start valid from " + new Date(result["validFrom"]).toLocaleString();
//                     let validTo = "Expire valid to " + new Date(result["validTo"]).toLocaleString();
//                     let validFor = "Valid for " + result["validFor"];

//                     let check_day = Math.sign(result['daysRemaining'])

//                     // console.log(res)
//                     // console.log(daysRemaining)
//                     // console.log(validate)
//                     // console.log(validFrom)
//                     // console.log(validTo)
//                     // console.log(validFor)
//                     // console.log(check_day)

//                     // showResult.innerHTML = daysRemaining;
//                     // document.getElementById("daysRemaining").innerHTML = daysRemaining;
//                     // document.getElementById("validate").innerHTML = validate;
//                     // document.getElementById("validFrom").innerHTML = validFrom;
//                     // document.getElementById("validFrom").innerHTML = validFrom;
//                     // document.getElementById("validTo").innerHTML = validTo;
//                     // document.getElementById("validFor").innerHTML = validFor;

//                     console.log('Math.sign = ' + Math.sign(result['daysRemaining']));
//                     console.log(validate)

//                     if (result["valid"] == true && res == 1) {
//                         switch (Math.sign(result['daysRemaining'])) {
//                             case 1:
//                                 document.getElementById('Certificate_icon').style.color = 'green'
//                                 document.getElementById("dayremaining").innerHTML = res + ' remaining';
//                                 console.log('มันเข้า 1 ด้วย')
//                                 break
//                             case -1:
//                                 document.getElementById('Certificate_icon').style.color = 'red'
//                                 document.getElementById("dayremaining").innerHTML = daysRemaining + ' day expired';
//                                 console.log('มันเข้า -1 ด้วย')
//                                 break
//                             case 0:
//                                 document.getElementById('Certificate_icon').style.color = 'red'
//                                 document.getElementById("dayremaining").innerHTML = 'Today expired';
//                                 console.log('มันเข้า 0 ด้วย')
//                                 break
//                             case -0:
//                                 document.getElementById("dayremaining").innerHTML = '-0';
//                                 console.log('มันเข้า -0 ด้วย')
//                                 break
//                             case NaN:
//                                 document.getElementById("dayremaining").innerHTML = 'NaN';
//                                 console.log('มันเข้า NaN ด้วย')
//                                 break
//                             default:
//                                 document.getElementById("dayremaining").innerHTML = 'อยู่เหนือความคาดหมาย';
//                                 break

//                         }
//                     } else if (result["valid"] == true && check_day == -1) {
//                         document.getElementById('Certificate_icon').style.color = 'red'
//                         document.getElementById("dayremaining").innerHTML = 'not extend validate';
//                     } else if (result["valid"] == false) {
//                         document.getElementById('Certificate_icon').style.color = 'red'
//                         document.getElementById("dayremaining").innerHTML = 'Fake validate';
//                     }


//                     // test only
//                     // document.getElementById('Certificate_icon').style.color = 'green'
//                     // document.getElementById("dayremaining").innerHTML = daysRemaining+' remaining';
//                     // test only

//                 });
//             // })





//             // wrong.host.badssl.com
//             // https://badssl.com/
//             // https://expired.badssl.com/

//             // press enter for execute send input


//             // ipc.send("SuccessCheck_url");

//             //===============================================================================================

//             console.log('sslChecker Successful')
//             resolve()
//         }, 500)
//     })
// }

// function checkLocation() {
//     return new Promise(function (resolve, reject) {
//         setTimeout(function () {

//             // check Location

//             const dns = require("dns");

//             cleanURL().then(function (url) {
//                 dns.lookup(url, (err, address, family) => {

//                     if (err) {
//                         document.getElementById('Location_icon').style.color = 'green'
//                         console.error(`DNS lookup failed: ${err}`);
//                     } else {
//                         console.log(`IP address: ${address}`);
//                         console.log(`Address family: IPv${family}`);

//                         const https = require('https');

//                         https.get('https://ipinfo.io/' + address + '/json', (res) => {
//                             let data = '';

//                             res.on('data', (chunk) => {
//                                 data += chunk;
//                             });

//                             res.on('end', () => {
//                                 const location = JSON.parse(data);
//                                 console.log(`City: ${location.city}`);
//                                 console.log(`Region: ${location.region}`);
//                                 console.log(`Country: ${location.country}`);




//                                 // https://restcountries.com/#api-endpoints-v2-full-name
//                                 // https://restcountries.com/v2/name/US?fullText=true

//                                 const https = require('https');

//                                 https.get('https://restcountries.com/v2/name/' + location.country + '?fullText=true', (res) => {
//                                     // https://restcountries.com/v2/name/{name}?fullText=true
//                                     let data_country = '';

//                                     res.on('data', (chunk2) => {
//                                         data_country += chunk2;
//                                     });

//                                     res.on('end', () => {
//                                         const country = JSON.parse(data_country)[0];
//                                         console.log(`Full name: ${country.name}`);
//                                         document.getElementById('countryServer').innerHTML = country.name
//                                         document.getElementById('Location_icon').style.color = 'green'

//                                     });

//                                 }).on('error', (err) => {
//                                     document.getElementById('Location_icon').style.color = 'red'

//                                     console.error(`API request failed: ${err}`);
//                                     // document.getElementById('country_server').innerHTML = err
//                                 });


//                                 // document.getElementById('country').innerHTML = location.country


//                             });

//                         }).on('error', (err) => {
//                             document.getElementById('Location_icon').style.color = 'red'

//                             console.error(`IP geolocation failed: ${err}`);
//                         });
//                     }
//                 });
//             })
//             console.log('check Location')



//             console.log('Check Location Successful')
//             resolve()
//         }, 500)
//     })
// }

function checkWebServerEngineHTTP() {
    return new Promise(function (resolve, reject) {
        setTimeout(function () {

            cleanURL().then(function (url) {
                // check Engine HTTP

                const https = require('https');

                console.log('check Engine HTTP')
                // `https://${check.startsWith("www.") ? check : "www." + check}`;
                https.get(`https://${url.startsWith("www.") ? url : "www." + url}`, (res) => {
                    let header = res.headers['server'];
                    console.log(`The HTTP server engine is: ${header}`);

                    if (header == undefined) {
                        document.getElementById('Engine_HTTP_icon').style.color = '#969d52'
                        document.getElementById('serverHTTP').innerHTML = header
                    } else {
                        document.getElementById('Engine_HTTP_icon').style.color = 'green'
                        document.getElementById('serverHTTP').innerHTML = header
                    }

                });
            })


            console.log('Check Engine HTTP Successful')
            resolve()
        }, 500)
    })
}

async function scanSite() {
    await certificateChecker()
    await checkLocation()
    await checkWebServerEngineHTTP()
    console.log('Scan Site Successful')
}


// const sslChecker = require("ssl-checker");

scan.addEventListener("click", () => {
    // scanSite()

    let check = document.getElementById("linkToScan").value;
    // let showResult = document.getElementById("cerResults");

    let sslChecker = require("ssl-checker")


    // let daysRemaining = "Time remaining "+result['daysRemaining']+ " day"
    // let validate = "Validate = "+result['valid']
    // let validFrom = "Start valid from "+result['validFrom']
    // let validTo = "Expire valid to "+result['validTo']


    console.log(check)
    console.log('clean URL')
    let url = ''
    if (check.includes("://")){
        url = new URL(check).hostname
    } else {
        url = check
    }


    // let url = new URL(check).hostname
    // console.log(url)
    console.log('yo')




    // check certificate valid

    console.log('check certificate valid')


        console.log(url)
        sslChecker(url, "GET", 443).then((result) => {
            let res = result["daysRemaining"]
            let daysRemaining = "Time remaining " + result["daysRemaining"] + " day";
            let validate = "Validate = " + result["valid"];
            let validFrom = "Start valid from " + new Date(result["validFrom"]).toLocaleString();
            let validTo = "Expire valid to " + new Date(result["validTo"]).toLocaleString();
            let validFor = "Valid for " + result["validFor"];

            let check_day = Math.sign(result['daysRemaining'])

            // console.log(res)
            // console.log(daysRemaining)
            // console.log(validate)
            // console.log(validFrom)
            // console.log(validTo)
            // console.log(validFor)
            // console.log(check_day)

            // showResult.innerHTML = daysRemaining;
            // document.getElementById("daysRemaining").innerHTML = daysRemaining;
            // document.getElementById("validate").innerHTML = validate;
            // document.getElementById("validFrom").innerHTML = validFrom;
            // document.getElementById("validFrom").innerHTML = validFrom;
            // document.getElementById("validTo").innerHTML = validTo;
            // document.getElementById("validFor").innerHTML = validFor;

            console.log('Math.sign = ' + Math.sign(result['daysRemaining']));
            console.log(validate)

            if (result["valid"] == true && check_day == 1) {
                switch (Math.sign(result['daysRemaining'])) {
                    case 1:
                        document.getElementById('Certificate_icon').style.color = 'green'
                        document.getElementById("dayremaining").innerHTML = res + ' remaining';
                        console.log('มันเข้า 1 ด้วย')
                        break
                    case -1:
                        document.getElementById('Certificate_icon').style.color = 'red'
                        document.getElementById("dayremaining").innerHTML = daysRemaining + ' day expired';
                        console.log('มันเข้า -1 ด้วย')
                        break
                    case 0:
                        document.getElementById('Certificate_icon').style.color = 'red'
                        document.getElementById("dayremaining").innerHTML = 'Today expired';
                        console.log('มันเข้า 0 ด้วย')
                        break
                    case -0:
                        document.getElementById("dayremaining").innerHTML = '-0';
                        console.log('มันเข้า -0 ด้วย')
                        break
                    case NaN:
                        document.getElementById("dayremaining").innerHTML = 'NaN';
                        console.log('มันเข้า NaN ด้วย')
                        break
                    default:
                        document.getElementById("dayremaining").innerHTML = 'อยู่เหนือความคาดหมาย';
                        break

                }
            } else if (result["valid"] == true && check_day == -1) {
                document.getElementById('Certificate_icon').style.color = 'red'
                document.getElementById("dayremaining").innerHTML = 'not extend validate';
            } else if (result["valid"] == false) {
                document.getElementById('Certificate_icon').style.color = 'red'
                document.getElementById("dayremaining").innerHTML = 'Fake validate';
            }


            // test only
            // document.getElementById('Certificate_icon').style.color = 'green'
            // document.getElementById("dayremaining").innerHTML = daysRemaining+' remaining';
            // test only

        });






    // wrong.host.badssl.com
    // https://badssl.com/
    // https://expired.badssl.com/

    // press enter for execute send input


    // ipc.send("SuccessCheck_url");

    //===============================================================================================


    const dns = require("dns");

    dns.lookup(url, (err, address, family) => {

        if (err) {
            document.getElementById('Location_icon').style.color = 'green'
            console.error(`DNS lookup failed: ${err}`);
        } else {
            console.log(`IP address: ${address}`);
            console.log(`Address family: IPv${family}`);

            const https = require('https');

            https.get('https://ipinfo.io/' + address + '/json', (res) => {
                let data = '';

                res.on('data', (chunk) => {
                    data += chunk;
                });

                res.on('end', () => {
                    const location = JSON.parse(data);
                    console.log(`City: ${location.city}`);
                    console.log(`Region: ${location.region}`);
                    console.log(`Country: ${location.country}`);




                    // https://restcountries.com/#api-endpoints-v2-full-name
                    // https://restcountries.com/v2/name/US?fullText=true

                    const https = require('https');

                    https.get('https://restcountries.com/v2/name/' + location.country + '?fullText=true', (res) => {
                        // https://restcountries.com/v2/name/{name}?fullText=true
                        let data_country = '';

                        res.on('data', (chunk2) => {
                            data_country += chunk2;
                        });

                        res.on('end', () => {
                            const country = JSON.parse(data_country)[0];
                            console.log(`Full name: ${country.name}`);
                            document.getElementById('countryServer').innerHTML = country.name
                            document.getElementById('Location_icon').style.color = 'green'

                        });

                    }).on('error', (err) => {
                        document.getElementById('Location_icon').style.color = 'red'

                        console.error(`API request failed: ${err}`);
                        // document.getElementById('country_server').innerHTML = err
                    });


                    // document.getElementById('country').innerHTML = location.country


                });

            }).on('error', (err) => {
                document.getElementById('Location_icon').style.color = 'red'

                console.error(`IP geolocation failed: ${err}`);
            });
        }
    });




    // check Engine HTTP

    const https = require('https');

    console.log('check Engine HTTP')
    // `https://${check.startsWith("www.") ? check : "www." + check}`;
    https.get(`https://${url.startsWith("www.") ? url : "www." + url}`, (res) => {
        let header = res.headers['server'];
        console.log(`The HTTP server engine is: ${header}`);

        if (header == undefined) {
            document.getElementById('Engine_HTTP_icon').style.color = '#969d52'
            document.getElementById('serverHTTP').innerHTML = header
        } else {
            document.getElementById('Engine_HTTP_icon').style.color = 'green'
            document.getElementById('serverHTTP').innerHTML = header
        }

    });


    urls = document.querySelectorAll('a');
    for (url in urls) console.log(urls[url].href);



    // module.exports = {
    //     rules: {
    //         "no-broken-access-control": {
    //             create: function (context) {
    //                 return {
    //                     // Check for expressions like req.user.id === req.params.id
    //                     BinaryExpression(node) {
    //                         if (
    //                             node.operator === "===" &&
    //                             node.left.object.name === "req" &&
    //                             node.right.object.name === "req"
    //                         ) {
    //                             context.report({
    //                                 node,
    //                                 message: "Potential broken access control vulnerability",
    //                             });
    //                         }
    //                     },
    //                 };
    //             },
    //         },
    //     },
    // };





    // ipc.send("checkIP");

    // const fetch = require('node-fetch');

    // const adminUrl = 'http://127.0.0.1/admin_welcome.php';
    // const userUrl = 'http://127.0.0.1/user_welcome.php';

    // async function checkAccessControl() {
    // const responseAdmin = await fetch(adminUrl);
    // const responseUser = await fetch(userUrl);
    // const contentAdmin = await responseAdmin.text();
    // const contentUser = await responseUser.text();

    // if (responseAdmin.ok && contentAdmin === contentUser) {
    //     console.log('Broken access control detected');
    //     document.getElementById('Web_Vulnerability_icon').style.color = 'green'
    // } else {
    //     console.log('Broken access control not detected');
    //     document.getElementById('Web_Vulnerability_icon').style.color = 'red'
    // }
    // }
    // checkAccessControl();

    // ipc.send("SuccessCheck_url");
});






//
// # A01:2021 – Broken Access Control    ![icon](assets/TOP_10_Icons_Final_Broken_Access_Control.png){: style="height:80px;width:80px" align="right"}

// ## Factors

// | CWEs Mapped | Max Incidence Rate | Avg Incidence Rate | Avg Weighted Exploit | Avg Weighted Impact | Max Coverage | Avg Coverage | Total Occurrences | Total CVEs |
// |:-------------:|:--------------------:|:--------------------:|:--------------:|:--------------:|:----------------------:|:---------------------:|:-------------------:|:------------:|
// | 34          | 55.97%             | 3.81%              | 6.92                 | 5.93                | 94.55%       | 47.72%       | 318,487           | 19,013     |

// ## Overview

// Moving up from the fifth position, 94% of applications were tested for
// some form of broken access control with the average incidence rate of 3.81%, and has the most occurrences in the contributed dataset with over 318k. Notable Common Weakness Enumerations (CWEs) included are *CWE-200: Exposure of Sensitive Information to an Unauthorized Actor*, *CWE-201:
// Insertion of Sensitive Information Into Sent Data*, and *CWE-352:
// Cross-Site Request Forgery*.

// ## Description

// Access control enforces policy such that users cannot act outside of
// their intended permissions. Failures typically lead to unauthorized
// information disclosure, modification, or destruction of all data or
// performing a business function outside the user's limits. Common access
// control vulnerabilities include:

// -   Violation of the principle of least privilege or deny by default,
//     where access should only be granted for particular capabilities,
//     roles, or users, but is available to anyone.

// -   Bypassing access control checks by modifying the URL (parameter
//     tampering or force browsing), internal application state, or the
//     HTML page, or by using an attack tool modifying API requests.

// -   Permitting viewing or editing someone else's account, by providing
//     its unique identifier (insecure direct object references)

// -   Accessing API with missing access controls for POST, PUT and DELETE.

// -   Elevation of privilege. Acting as a user without being logged in or
//     acting as an admin when logged in as a user.

// -   Metadata manipulation, such as replaying or tampering with a JSON
//     Web Token (JWT) access control token, or a cookie or hidden field
//     manipulated to elevate privileges or abusing JWT invalidation.

// -   CORS misconfiguration allows API access from unauthorized/untrusted
//     origins.

// -   Force browsing to authenticated pages as an unauthenticated user or
//     to privileged pages as a standard user.

// ## How to Prevent

// Access control is only effective in trusted server-side code or
// server-less API, where the attacker cannot modify the access control
// check or metadata.

// -   Except for public resources, deny by default.

// -   Implement access control mechanisms once and re-use them throughout
//     the application, including minimizing Cross-Origin Resource Sharing (CORS) usage.

// -   Model access controls should enforce record ownership rather than
//     accepting that the user can create, read, update, or delete any
//     record.

// -   Unique application business limit requirements should be enforced by
//     domain models.

// -   Disable web server directory listing and ensure file metadata (e.g.,
//     .git) and backup files are not present within web roots.

// -   Log access control failures, alert admins when appropriate (e.g.,
//     repeated failures).

// -   Rate limit API and controller access to minimize the harm from
//     automated attack tooling.

// -   Stateful session identifiers should be invalidated on the server after logout.
//     Stateless JWT tokens should rather be short-lived so that the window of 
//     opportunity for an attacker is minimized. For longer lived JWTs it's highly recommended to
//     follow the OAuth standards to revoke access.

// Developers and QA staff should include functional access control unit
// and integration tests.

// ## Example Attack Scenarios

// **Scenario #1:** The application uses unverified data in a SQL call that
// is accessing account information:

// ```
//  pstmt.setString(1, request.getParameter("acct"));
//  ResultSet results = pstmt.executeQuery( );
// ```

// An attacker simply modifies the browser's 'acct' parameter to send
// whatever account number they want. If not correctly verified, the
// attacker can access any user's account.

// ```
//  https://example.com/app/accountInfo?acct=notmyacct
// ```

// **Scenario #2:** An attacker simply forces browses to target URLs. Admin
// rights are required for access to the admin page.

// ```
//  https://example.com/app/getappInfo
//  https://example.com/app/admin_getappInfo
// ```
// If an unauthenticated user can access either page, it's a flaw. If a
// non-admin can access the admin page, this is a flaw.

// ## References

// -   [OWASP Proactive Controls: Enforce Access
//     Controls](https://owasp.org/www-project-proactive-controls/v3/en/c7-enforce-access-controls)

// -   [OWASP Application Security Verification Standard: V4 Access
//     Control](https://owasp.org/www-project-application-security-verification-standard)

// -   [OWASP Testing Guide: Authorization
//     Testing](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/README)

// -   [OWASP Cheat Sheet: Authorization](https://cheatsheetseries.owasp.org/cheatsheets/Authorization_Cheat_Sheet.html)

// -   [PortSwigger: Exploiting CORS
//     misconfiguration](https://portswigger.net/blog/exploiting-cors-misconfigurations-for-bitcoins-and-bounties)
    
// -   [OAuth: Revoking Access](https://www.oauth.com/oauth2-servers/listing-authorizations/revoking-access/)

// ## List of Mapped CWEs

// [CWE-22 Improper Limitation of a Pathname to a Restricted Directory
// ('Path Traversal')](https://cwe.mitre.org/data/definitions/22.html)

// [CWE-23 Relative Path Traversal](https://cwe.mitre.org/data/definitions/23.html)

// [CWE-35 Path Traversal: '.../...//'](https://cwe.mitre.org/data/definitions/35.html)

// [CWE-59 Improper Link Resolution Before File Access ('Link Following')](https://cwe.mitre.org/data/definitions/59.html)

// [CWE-200 Exposure of Sensitive Information to an Unauthorized Actor](https://cwe.mitre.org/data/definitions/200.html)

// [CWE-201 Exposure of Sensitive Information Through Sent Data](https://cwe.mitre.org/data/definitions/201.html)

// [CWE-219 Storage of File with Sensitive Data Under Web Root](https://cwe.mitre.org/data/definitions/219.html)

// [CWE-264 Permissions, Privileges, and Access Controls (should no longer be used)](https://cwe.mitre.org/data/definitions/264.html)

// [CWE-275 Permission Issues](https://cwe.mitre.org/data/definitions/275.html)

// [CWE-276 Incorrect Default Permissions](https://cwe.mitre.org/data/definitions/276.html)

// [CWE-284 Improper Access Control](https://cwe.mitre.org/data/definitions/284.html)

// [CWE-285 Improper Authorization](https://cwe.mitre.org/data/definitions/285.html)

// [CWE-352 Cross-Site Request Forgery (CSRF)](https://cwe.mitre.org/data/definitions/352.html)

// [CWE-359 Exposure of Private Personal Information to an Unauthorized Actor](https://cwe.mitre.org/data/definitions/359.html)

// [CWE-377 Insecure Temporary File](https://cwe.mitre.org/data/definitions/377.html)

// [CWE-402 Transmission of Private Resources into a New Sphere ('Resource Leak')](https://cwe.mitre.org/data/definitions/402.html)

// [CWE-425 Direct Request ('Forced Browsing')](https://cwe.mitre.org/data/definitions/425.html)

// [CWE-441 Unintended Proxy or Intermediary ('Confused Deputy')](https://cwe.mitre.org/data/definitions/441.html)

// [CWE-497 Exposure of Sensitive System Information to an Unauthorized Control Sphere](https://cwe.mitre.org/data/definitions/497.html)

// [CWE-538 Insertion of Sensitive Information into Externally-Accessible File or Directory](https://cwe.mitre.org/data/definitions/538.html)

// [CWE-540 Inclusion of Sensitive Information in Source Code](https://cwe.mitre.org/data/definitions/540.html)

// [CWE-548 Exposure of Information Through Directory Listing](https://cwe.mitre.org/data/definitions/548.html)

// [CWE-552 Files or Directories Accessible to External Parties](https://cwe.mitre.org/data/definitions/552.html)

// [CWE-566 Authorization Bypass Through User-Controlled SQL Primary Key](https://cwe.mitre.org/data/definitions/566.html)

// [CWE-601 URL Redirection to Untrusted Site ('Open Redirect')](https://cwe.mitre.org/data/definitions/601.html)

// [CWE-639 Authorization Bypass Through User-Controlled Key](https://cwe.mitre.org/data/definitions/639.html)

// [CWE-651 Exposure of WSDL File Containing Sensitive Information](https://cwe.mitre.org/data/definitions/651.html)

// [CWE-668 Exposure of Resource to Wrong Sphere](https://cwe.mitre.org/data/definitions/668.html)

// [CWE-706 Use of Incorrectly-Resolved Name or Reference](https://cwe.mitre.org/data/definitions/706.html)

// [CWE-862 Missing Authorization](https://cwe.mitre.org/data/definitions/862.html)

// [CWE-863 Incorrect Authorization](https://cwe.mitre.org/data/definitions/863.html)

// [CWE-913 Improper Control of Dynamically-Managed Code Resources](https://cwe.mitre.org/data/definitions/913.html)

// [CWE-922 Insecure Storage of Sensitive Information](https://cwe.mitre.org/data/definitions/922.html)

// [CWE-1275 Sensitive Cookie with Improper SameSite Attribute](https://cwe.mitre.org/data/definitions/1275.html)