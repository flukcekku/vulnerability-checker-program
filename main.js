// main.js

// Modules to control application life and create native browser window
const { app, BrowserWindow, ipcMain } = require('electron')
const path = require('path')
const ipc = ipcMain
const { spawn } = require('child_process')

let mainWindow

const createWindow = () => {
  mainWindow = new BrowserWindow({
    width: 1000,
    height: 600,
    // titleBarStyle:'hidden',
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      devTools:true,
      nodeIntegration:true,
      contextIsolation:false,
      webSecurity:false
    }
  })


  // and load the index.html of the app.
  mainWindow.loadFile('src/scan.html')

  

  ipc.on('closeTheApp', ()=>{
    console.log('YESSSS')
  })

  // Open the DevTools.
  // mainWindow.webContents.openDevTools()

  //ipc event handler
  ipc.on('clickcheckBTNfromMain',()=>{
    console.log('Event inputUrl is coming')
  })

  ipc.on('clickcheck', ()=>{
    console.log('Event check Url is coming')
    
  })

  ipc.on('SuccessCheck_url', ()=>{
    console.log('SuccessCheck_url')
  })

  ipc.on('outputURL',function(event,resultData){
    // console.log('event OutputURL coming from index')
    // console.log(resultData)

    // mainWindow.webContents.executeJavaScript("const showResult = document.getElementById('cerResults'); showResult.innerHTML = resultData['daysRemaining']")
    

  
  })

  // ipc.on('checkIP',()=>{
  //   console.log('event ip is coming')
  // })

  app.on('ready', ()=>{
    createWindow();
  })


}

// ฟังก์ชันสำหรับรันไฟล์ไพธอนและส่งผลลัพธ์ไปยังหน้าเว็บ
function runPythonFile() {
  const pythonProcess = spawn('python', ['test.py']);

  pythonProcess.stdout.on('data', (data) => {
    // ส่งผลลัพธ์ไปยังหน้าเว็บ
    mainWindow.webContents.send('python-result', data.toString());
  });

  pythonProcess.stderr.on('data', (data) => {
    console.error(`เกิดข้อผิดพลาด: ${data}`);
  });

  pythonProcess.on('close', (code) => {
    console.log(`โปรแกรม Python จบการทำงานด้วยรหัส: ${code}`);
  });
}



// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  createWindow()

  // เมื่อหน้าเว็บโหลดเสร็จสิ้น รันไฟล์ไพธอน
  mainWindow.webContents.on('did-finish-load', () => {
    runPythonFile();
  });

  app.on('activate', () => {
    // On macOS it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) createWindow()
  })


})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit()
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and require them here.